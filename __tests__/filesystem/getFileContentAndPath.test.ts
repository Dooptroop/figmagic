import { getFileContentAndPath } from '../../bin/frameworks/filesystem/getFileContentAndPath';

import {
  getFileContentAndPathOperationToken,
  getFileContentAndPathOperationComponent,
  getFileContentAndPathOperationStyle,
  getFileContentAndPathOperationCss,
  getFileContentAndPathOperationStory,
  getFileContentAndPathOperationDescription
} from '../../testdata/getFileContentAndPathOperation';

// TODO: Ensure tests are correct; also getting [Object object] issues

describe('Failure cases', () => {
  test('It should throw an error if running without arguments', async () => {
    // @ts-ignore
    await expect(getFileContentAndPath()).rejects.toThrow();
  });

  test('It should throw an error if missing any fields', async () => {
    // @ts-ignore
    await expect(getFileContentAndPath({})).rejects.toThrow();
  });
});

describe('Success cases', () => {
  describe('Tokens', () => {
    test('It should return valid data for tokens', async () => {
      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationToken)
      ).resolves.toMatchObject({
        fileContent: `// THIS FILE IS AUTO-GENERATED BY FIGMAGIC. DO NOT MAKE EDITS IN THIS FILE! CHANGES WILL GET OVER-WRITTEN BY ANY FURTHER PROCESSING.

const colors = {
 \"green3\": \"rgba(111, 207, 151, 1)\",
 \"green2\": \"rgba(39, 174, 96, 1)\",
 \"green1\": \"rgba(33, 150, 83, 1)\",
 \"blue3\": \"rgba(86, 204, 242, 1)\",
 \"blue2\": \"rgba(45, 156, 219, 1)\",
 \"blue1\": \"rgba(47, 128, 237, 1)\",
 \"yellow\": \"rgba(242, 201, 76, 1)\",
 \"orange\": \"rgba(242, 153, 74, 1)\",
 \"red\": \"rgba(235, 87, 87, 1)\",
 \"neon\": \"rgba(228, 255, 193, 1)\",
 \"gray5\": \"rgba(242, 242, 242, 1)\",
 \"gray4\": \"rgba(224, 224, 224, 1)\",
 \"gray3\": \"rgba(189, 189, 189, 1)\",
 \"gray2\": \"rgba(130, 130, 130, 1)\",
 \"gray1\": \"rgba(79, 79, 79, 1)\",
 \"white\": \"rgba(255, 255, 255, 1)\",
 \"black\": \"rgba(51, 51, 51, 1)\"
}

export default colors;`,
        filePath: 'tokens/colors.mjs'
      });
    });

    test('It should return valid data for tokens (enum)', async () => {
      const data = {
        ...getFileContentAndPathOperationToken,
        metadata: {
          dataType: 'enum'
        }
      };

      await expect(
        // @ts-ignore
        getFileContentAndPath(data)
      ).resolves.toMatchObject({
        fileContent: `// THIS FILE IS AUTO-GENERATED BY FIGMAGIC. DO NOT MAKE EDITS IN THIS FILE! CHANGES WILL GET OVER-WRITTEN BY ANY FURTHER PROCESSING.

enum colors {
  'green3' = 'rgba(111, 207, 151, 1)',
  'green2' = 'rgba(39, 174, 96, 1)',
  'green1' = 'rgba(33, 150, 83, 1)',
  'blue3' = 'rgba(86, 204, 242, 1)',
  'blue2' = 'rgba(45, 156, 219, 1)',
  'blue1' = 'rgba(47, 128, 237, 1)',
  'yellow' = 'rgba(242, 201, 76, 1)',
  'orange' = 'rgba(242, 153, 74, 1)',
  'red' = 'rgba(235, 87, 87, 1)',
  'neon' = 'rgba(228, 255, 193, 1)',
  'gray5' = 'rgba(242, 242, 242, 1)',
  'gray4' = 'rgba(224, 224, 224, 1)',
  'gray3' = 'rgba(189, 189, 189, 1)',
  'gray2' = 'rgba(130, 130, 130, 1)',
  'gray1' = 'rgba(79, 79, 79, 1)',
  'white' = 'rgba(255, 255, 255, 1)',
  'black' = 'rgba(51, 51, 51, 1)',
}

export default colors;`,
        filePath: 'tokens/colors'
      });
    });
  });

  describe('Components', () => {
    test('It should return valid data for components', async () => {
      const fileContent = `import React from 'react';
import PropTypes from 'prop-types';

import {{NAME_STYLED}} from './{{NAME_STYLED}}';

const {{NAME}} = props => <{{NAME_STYLED}} {{EXTRA_PROPS}}>{{TEXT}}{props.children}</{{NAME_STYLED}}>;

{{NAME}}.propTypes = {};

export default {{NAME}};
`;

      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationComponent)
      ).resolves.toMatchObject({
        fileContent: fileContent,
        filePath: 'tokens/colors.mjs'
      });
    });
  });

  describe('Style', () => {
    test('It should return valid data for style', async () => {
      const fileContent = `import styled from 'styled-components';

import {{NAME_CSS}} from './{{NAME_CSS}}.ts'

// Do your regular imports like:
// import fontSizes from 'tokens/fontSizes';

// Extend the below as needed
const {{NAME_STYLED}} = styled.{{ELEMENT}}\`
  \${{{NAME_CSS}}};
\`;

export default {{NAME_STYLED}};
`;

      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationStyle)
      ).resolves.toMatchObject({
        fileContent: fileContent,
        filePath: 'tokens/colorsStyled.mjs'
      });
    });
  });

  describe('CSS', () => {
    test('It should return valid data for CSS', async () => {
      const fileContent = `import styled from 'styled-components';

import {{NAME_CSS}} from './{{NAME_CSS}}.ts'

// Do your regular imports like:
// import fontSizes from 'tokens/fontSizes';

// Extend the below as needed
const {{NAME_STYLED}} = styled.{{ELEMENT}}\`
  \${{{NAME_CSS}}};
\`;

export default {{NAME_STYLED}};
`;

      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationCss)
      ).resolves.toMatchObject({
        fileContent: fileContent,
        filePath: 'tokens/colorsStyled.mjs'
      });
    });
  });

  describe('Story', () => {
    test('It should return valid data for Storybook', async () => {
      const fileContent = `import React from 'react';
import {{NAME}} from './{{NAME}}';

import notes from './{{NAME}}.description.md';

export default { title: '{{NAME}}', parameters: { notes } };

export const {{NAME}}Regular = () => <{{NAME}}>{{TEXT}}</{{NAME}}>
;`;

      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationStory)
      ).resolves.toMatchObject({
        fileContent: fileContent,
        filePath: 'tokens/colors.stories.mjs'
      });
    });
  });

  describe('Description', () => {
    test('It should return valid data for description', async () => {
      const fileContent = `<!--THIS FILE IS AUTO-GENERATED BY FIGMAGIC. DO NOT MAKE EDITS IN THIS FILE! CHANGES WILL GET OVER-WRITTEN BY ANY FURTHER PROCESSING.-->
[object Object]`;

      await expect(
        // @ts-ignore
        getFileContentAndPath(getFileContentAndPathOperationDescription)
      ).resolves.toMatchObject({
        fileContent: fileContent,
        filePath: 'tokens/colors.description.mjs'
      });
    });
  });
});
