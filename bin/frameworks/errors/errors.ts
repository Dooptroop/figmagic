import { colors } from '../system/colors';

export const ErrorAddDescriptionToElements = `${colors.FgRed}Missing elements and/or components in addDescriptionToElements()!${colors.Reset}`;
export const ErrorCamelize = `${colors.FgRed}No string provided to camelize()!${colors.Reset}`;
export const ErrorCleanArrays = `${colors.FgRed}Missing one or more of "classNames" and/or "classContent" when calling cleanArrays()!${colors.Reset}`;
export const ErrorConvertHexToRgba = `${colors.FgRed}Missing one or more of red, green, blue and alpha in convertHexToRgba()!${colors.Reset}`;
export const ErrorCreateConfiguration = `${colors.FgRed}No path provided to createConfiguration()!${colors.Reset}`;
export const ErrorCreateConfigurationNoDefault = `${colors.FgRed}No default configuration provided to createConfiguration()!${colors.Reset}`;
export const ErrorCreateCssString = `${colors.FgRed}Missing one or more of required arguments: "intersections", "uniqueValues"!${colors.Reset}`;
export const ErrorCreateElements = `${colors.FgRed}Missing arguments provided to createElements()!${colors.Reset}`;
export const ErrorCreateEnumStringOutOfObject = `${colors.FgRed}No object provided to createEnumStringOutOfObject()!${colors.Reset}`;
export const ErrorCreateFolder = `${colors.FgRed}No directory specified for createFolder()!${colors.Reset}`;
export const ErrorCreateGraphics = `${colors.FgRed}Missing arguments provided to createGraphics()!${colors.Reset}`;
export const ErrorCreateImportStringFromList = `${colors.FgRed}No "importArray" provided to createImportStringFromList()!${colors.Reset}`;
export const ErrorCreateImportStringFromListZeroLength = `${colors.FgRed}Provided "importArray" is zero-length when calling createImportStringFromList()!${colors.Reset}`;
export const ErrorCreatePage = `${colors.FgRed}No pages provided to createPage()!${colors.Reset}`;
export const ErrorCreateTokens = `${colors.FgRed}Missing required arguments when calling createTokens()!${colors.Reset}`;
export const ErrorDownloadFile = `${colors.FgRed}Missing one or more of "url", "folder", or "file" arguments in downloadFile()!${colors.Reset}`;
export const ErrorExtractDescription = `${colors.FgRed}Missing description in extractDescription()!${colors.Reset}`;
export const ErrorExtractTokens = `${colors.FgRed}No sheet or name for processTokens()!${colors.Reset}`;
export const ErrorExtractTokensNoConfig = `${colors.FgRed}No config provided to processTokens()!${colors.Reset}`;
export const ErrorFigmagicController = `${colors.FgRed}Error in FigmagicController()!${colors.Reset}`;
export const ErrorFindShortenedNameMatchWrongType = `${colors.FgRed}Arguments are not of string type!${colors.Reset}`;
export const ErrorGetData = `${colors.FgRed}Could not retrieve any data. Are you missing a valid API key?${colors.Reset}`;
export const ErrorGetDataNoData = `${colors.FgRed}No data retrieved...${colors.Reset}`;
export const ErrorGetDataFailedLocalAndRemote = `${colors.FgRed}Failed to get local and/or remote data in getData()!${colors.Reset}`;
export const ErrorGetDataLocal = `${colors.FgRed}Missing arguments when calling getDataLocal()!${colors.Reset}`;
export const ErrorGetDataNoTokenOrUrl = `${colors.FgRed}Missing token and/or URL when attempting to get remote data!${colors.Reset}`;
export const ErrorGetDescription = `${colors.FgRed}Missing element in getDescription()!${colors.Reset}`;
export const ErrorGetFontColor = `${colors.FgRed}Error in getFontColor()!${colors.Reset}`;
export const ErrorGetFiles = `${colors.FgRed}Error in getFiles()!${colors.Reset}`;
export const ErrorGetFileContents = `${colors.FgRed}Missing path, name and/or format!${colors.Reset}`;
export const ErrorGetFileContentAndPath = `${colors.FgRed}Missing argument in getFileContentAndPath()!${colors.Reset}`;
export const ErrorGetFileContentAndPathMissingFields = `${colors.FgRed}Missing fields in getFileContentAndPath()!${colors.Reset}`;
export const ErrorGetFileContentAndPathNoReturn = `${colors.FgRed}Missing return in getFileContentAndPath()!${colors.Reset}`;
export const ErrorGetFileList = `${colors.FgRed}Missing one or more of required arguments: "imageResponse", "ids" and/or "outputFormatGraphics" when calling getFileList()!${colors.Reset}`;
export const ErrorGetFromApi = `${colors.FgRed}Missing one or more of required arguments: "figmaToken", "figmaUrl" when attempting to get data from Figma API!${colors.Reset}`;
export const ErrorGetIds = `${colors.FgRed}No (or zero-length) array passed to getIds()!${colors.Reset}`;
export const ErrorGetIdstring = `${colors.FgRed}Missing required argument "ids" when calling getIdString()!${colors.Reset}`;
export const ErrorGetIntersectingValues = `${colors.FgRed}Missing "arrays" argument when calling getIntersectingValues()!${colors.Reset}`;
export const ErrorGetPaddingX = `${colors.FgRed}Error when calling getPaddingX()!${colors.Reset}`;
export const ErrorGetPaddingY = `${colors.FgRed}Error when calling getPaddingY()!${colors.Reset}`;
export const ErrorGetTokenMatch = `${colors.FgRed}Missing one or more of required arguments: "tokens", "tokenFileName", "property", and/or "expectedValue"!${colors.Reset}`;
export const ErrorGetTokenMatchNoRemSize = `${colors.FgRed}Missing required "remSize" argument for getTokenMatch() when converting to rem/em!${colors.Reset}`;
export const ErrorGetUniqueValues = `${colors.FgRed}Missing one or more of required arguments: "arrays", and/or "intersections" when calling getUniqueValues()!${colors.Reset}`;
export const ErrorHandleNestedElements = `${colors.FgRed}Missing element in handleNestedElements()!${colors.Reset}`;
export const ErrorLoadFile = (path: string): string => {
  if (!path) throw new Error('No string passed to ErrorLoadFile!');
  return `${colors.FgRed}Could not find file: ${path}!${colors.Reset}`;
};
export const ErrorNormalizeUnits = `${colors.FgRed}Missing arguments for normalizeUnits()!${colors.Reset}`;
export const ErrorNormalizeUnitsNoRemSize = `${colors.FgRed}Missing required "remSize" argument for normalizeUnits() when converting to rem/em!${colors.Reset}`;
export const ErrorNormalizeUnitsUndefined = `${colors.FgRed}arguments "rootSize" or "unitSize" are undefined!${colors.Reset}`;
export const ErrorParseCliArgs = `${colors.FgRed}No arguments array passed to parseCliArgs()!${colors.Reset}`;
export const ErrorParseCssFromElement = `${colors.FgRed}Missing one or more of required arguments: "layoutElement", "textElement", "remSize", and/or "outputTokenFormat" when calling parseCssFromElement()!${colors.Reset}`;
export const ErrorParseElement = `${colors.FgRed}Missing one or more of required arguments: "element", and/or "remSize" when calling parseElement()!${colors.Reset}`;
export const ErrorParseHeight = `${colors.FgRed}Error in parseHeight()!${colors.Reset}`;
export const ErrorParsePadding = `${colors.FgRed}Error in parsePadding()!${colors.Reset}`;
export const ErrorGetBackgroundColor = `${colors.FgRed}Error in getBackgroundColor()!${colors.Reset}`;
export const ErrorParseBackgroundColor = `${colors.FgRed}Error in parseBackgroundColor()!${colors.Reset}`;
export const ErrorParseBorderWidth = `${colors.FgRed}Error in parseBorderWidth()!${colors.Reset}`;
export const ErrorGetBorderColor = `${colors.FgRed}Error in getBorderColor()!${colors.Reset}`;
export const ErrorParseBorderColor = `${colors.FgRed}Error in parseBorderColor()!${colors.Reset}`;
export const ErrorParseBorderRadius = `${colors.FgRed}Error in parseBorderRadius()!${colors.Reset}`;
export const ErrorGetShadow = `${colors.FgRed}Error in getShadow()!${colors.Reset}`;
export const ErrorParseShadow = `${colors.FgRed}Error in parseShadow()!${colors.Reset}`;
export const ErrorUpdateParsing = `${colors.FgRed}Error in updateParsing()!${colors.Reset}`;
export const ErrorParseTypographyStylingFromElement = `${colors.FgRed}Missing one or more of required arguments: "element", or "remSize" when calling parseTypographyStylingFromElement()!${colors.Reset}`;
export const ErrorPrepFileComponent = `${colors.FgRed}Missing required arguments in type, when calling prepComponent()!${colors.Reset}`;
export const ErrorPrepFileCss = `${colors.FgRed}Missing required arguments in type, when calling prepComponent()!${colors.Reset}`;
export const ErrorPrepFileDescription = `${colors.FgRed}Missing required arguments in type, when calling prepComponent()!${colors.Reset}`;
export const ErrorPrepFileStorybook = `${colors.FgRed}Missing required arguments in type, when calling prepComponent()!${colors.Reset}`;
export const ErrorPrepFileStyledComponents = `${colors.FgRed}Missing required arguments in type, when calling prepComponent()!${colors.Reset}`;
export const ErrorPrepareWrite = `${colors.FgRed}No templates provided to prepareWrite()! Seems like fallback template path also failed...${colors.Reset}`;
export const ErrorProcessElements = `${colors.FgRed}Missing one or more of required arguments: "elementsPage", "config", and/or "components"! Make sure you have a page called "Elements" in your Figma document.${colors.Reset}`;
export const ErrorProcessElementsNoMainElement = `${colors.FgRed}No MAIN_ELEMENT in processElements()!${colors.Reset}`;
export const ErrorProcessGraphics = `${colors.FgRed}Graphics page is undefined or empty! Make sure you have a page called "Graphics" in your Figma document.${colors.Reset}`;
export const ErrorProcessGraphicsImageError = `${colors.FgRed}Error when fetching graphics from Figma API!${colors.Reset}`;
export const ErrorProcessGraphicsNoImages = `${colors.FgRed}No images received from Figma API!${colors.Reset}`;
export const ErrorProcessNestedCss = `${colors.FgRed}No 'css' string provided to processNestedCss()!${colors.Reset}`;
export const ErrorRefresh = `${colors.FgRed}No path provided to refresh()!${colors.Reset}`;
export const ErrorReplaceMediaQuery = `Missing one or more of required arguments: "str", and/or "match" when calling replaceMediaQuery()!${colors.Reset}`;
export const ErrorRoundColor = `${colors.FgRed}Error while rounding color value: Required argument "quantity" was not passed in!${colors.Reset}`;
export const ErrorRoundColorValue = `${colors.FgRed}Error while rounding color value: Scale value must be equal to or less than 255!${colors.Reset}`;
export const ErrorSliceOutObjectFromFile = `${colors.FgRed}Error in sliceOutObjectFromFile()!${colors.Reset}`;
export const ErrorSetupBorderWidthTokensMissingProps = `${colors.FgRed}Missing "name" or "strokeWeight" properties in border width frame!${colors.Reset}`;
export const ErrorSetupBorderWidthTokensNoChildren = `${colors.FgRed}Border Width has no children!${colors.Reset}`;
export const ErrorSetupBorderWidthTokensNoFrame = `${colors.FgRed}No frame for setupBorderWidthTokens()!${colors.Reset}`;
export const ErrorSetupColorTokensNoChildren = `${colors.FgRed}Color tokens frame has no children!${colors.Reset}`;
export const ErrorSetupColorTokensNoFills = `${colors.FgRed}Color has no "fills" property!${colors.Reset}`;
export const ErrorSetupColorTokensNoFrame = `${colors.FgRed}No frame for setupColorTokens()!${colors.Reset}`;
export const ErrorSetupDelayTokensMissingProps = `${colors.FgRed}Missing "name" or "characters" properties in Delay frame!${colors.Reset}`;
export const ErrorSetupDelayTokensNoChildren = `${colors.FgRed}Delay frame has no children!${colors.Reset}`;
export const ErrorSetupDelayTokensNoFrame = `${colors.FgRed}No frame for setupDelayTokens()!${colors.Reset}`;
export const ErrorSetupDurationTokensMissingProps = `${colors.FgRed}Missing "name" or "characters" properties in Duration frame!${colors.Reset}`;
export const ErrorSetupDurationTokensNoChildren = `${colors.FgRed}Duration frame has no children!${colors.Reset}`;
export const ErrorSetupDurationTokensNoFrame = `${colors.FgRed}No frame for setupDurationTokens()!${colors.Reset}`;
export const ErrorSetupEasingTokensMissingProps = `${colors.FgRed}Missing "name" or "characters" properties in Easing frame!${colors.Reset}`;
export const ErrorSetupEasingTokensNoChildren = `${colors.FgRed}Easing frame has no children!${colors.Reset}`;
export const ErrorSetupEasingTokensNoFrame = `${colors.FgRed}No frame for setupEasingTokens()!${colors.Reset}`;
export const ErrorSetupFontSizeTokensMissingProps = `${colors.FgRed}Missing "name" or "style" properties in font sizes frame!${colors.Reset}`;
export const ErrorSetupFontSizeTokensMissingSize = `${colors.FgRed}Missing required "style.fontSize" property!${colors.Reset}`;
export const ErrorSetupFontSizeTokensNoChildren = `${colors.FgRed}Font size frame is missing "children" array!${colors.Reset}`;
export const ErrorSetupFontSizeTokensNoFrame = `${colors.FgRed}No frame for setupFontSizeTokens()!${colors.Reset}`;
export const ErrorSetupFontSizeTokensNoSizing = `${colors.FgRed}Missing "fontUnit" or "remSize" properties when calling setupFontSizeTokens()!${colors.Reset}`;
export const ErrorSetupFontTokensMissingProps = `${colors.FgRed}Missing "name" or "style" properties in font tokens frame!${colors.Reset}`;
export const ErrorSetupFontTokensNoChildren = `${colors.FgRed}Font tokens frame is missing "children" array!${colors.Reset}`;
export const ErrorSetupFontTokensNoFrame = `${colors.FgRed}No frame for setupFontTokens()!${colors.Reset}`;
export const ErrorSetupFontWeightTokensMissingProps = `${colors.FgRed}Missing "name" or "style" properties in font weights frame!${colors.Reset}`;
export const ErrorSetupFontWeightTokensMissingWeight = `${colors.FgRed}Missing required "style.fontWeight" property!${colors.Reset}`;
export const ErrorSetupFontWeightTokensNoChildren = `${colors.FgRed}Font weights frame is missing "children" array!${colors.Reset}`;
export const ErrorSetupFontWeightTokensNoFrame = `${colors.FgRed}No frame for setupFontWeightTokens()!${colors.Reset}`;
export const ErrorSetupLetterSpacingTokensMissingProps = `${colors.FgRed}Missing "name" or "style" properties in letter spacing frame!${colors.Reset}`;
export const ErrorSetupLetterSpacingTokensNoChildren = `${colors.FgRed}Letter Spacing frame has no children!${colors.Reset}`;
export const ErrorSetupLetterSpacingTokensNoFrame = `${colors.FgRed}No frame for setupLetterSpacingTokens()!${colors.Reset}`;
export const ErrorSetupLineHeightTokensMissingPercent = `${colors.FgRed}Missing "style.lineHeightPercentFontSize" property in line heights frame!${colors.Reset}`;
export const ErrorSetupLineHeightTokensMissingProps = `${colors.FgRed}Missing "name" or "style" properties in line heights frame!${colors.Reset}`;
export const ErrorSetupLineHeightTokensNoChildren = `${colors.FgRed}Line heights frame has no children!${colors.Reset}`;
export const ErrorSetupLineHeightTokensNoFrame = `${colors.FgRed}No frame for setupLineHeightTokens()!${colors.Reset}`;
export const ErrorSetupMediaQueryTokensMissingProps = `${colors.FgRed}Missing "absoluteBoundingBox" property in media query frame!${colors.Reset}`;
export const ErrorSetupMediaQueryTokensNoChildren = `${colors.FgRed}Media Query frame has no children!${colors.Reset}`;
export const ErrorSetupMediaQueryTokensNoFrame = `${colors.FgRed}No frame for setupMediaQueryTokens()!${colors.Reset}`;
export const ErrorSetupOpacityTokensMissingProps = `${colors.FgRed}Missing "name" or "characters" properties in opacities frame!${colors.Reset}`;
export const ErrorSetupOpacityTokensNoChildren = `${colors.FgRed}Opacities frame has no children!${colors.Reset}`;
export const ErrorSetupOpacityTokensNoFrame = `${colors.FgRed}No frame for setupOpacityTokens()!${colors.Reset}`;
export const ErrorSetupRadiusTokensMissingProps = `${colors.FgRed}Missing "name"  property in radius frame!${colors.Reset}`;
export const ErrorSetupRadiusTokensNoChildren = `${colors.FgRed}Radius frame has no children!${colors.Reset}`;
export const ErrorSetupRadiusTokensNoFrame = `${colors.FgRed}No frame for setupRadiusTokens()!${colors.Reset}`;
export const ErrorSetupShadowTokensMissingProps = `${colors.FgRed}Missing "effects" property in shadow frame!${colors.Reset}`;
export const ErrorSetupShadowTokensNoChildren = `${colors.FgRed}Shadow frame has no children!${colors.Reset}`;
export const ErrorSetupShadowTokensNoFrame = `${colors.FgRed}No frame for setupShadowTokens()!${colors.Reset}`;
export const ErrorSetupSpacingTokensMissingProps = `${colors.FgRed}Missing "name" or "absoluteBoundingBox" properties in spacing frame!${colors.Reset}`;
export const ErrorSetupSpacingTokensNoChildren = `${colors.FgRed}Spacing frame has no children!${colors.Reset}`;
export const ErrorSetupSpacingTokensNoFrame = `${colors.FgRed}No frame for setupSpacingTokens()!${colors.Reset}`;
export const ErrorSetupSpacingTokensNoUnits = `${colors.FgRed}Missing "spacingUnit" or "remSize" properties when calling setupSpacingTokens()!${colors.Reset}`;
export const ErrorSetupZindexTokensMissingProps = `${colors.FgRed}Missing "name" or "characters" properties in Z index frame!${colors.Reset}`;
export const ErrorSetupZindexTokensNoChildren = `${colors.FgRed}Z Index frame has no children!${colors.Reset}`;
export const ErrorSetupZindexTokensNoFrame = `${colors.FgRed}No frame for setupZindexTokens()!${colors.Reset}`;
export const ErrorToPascalCase = `${colors.FgRed}Missing "str" argument when calling toPascalCase()!${colors.Reset}`;
export const ErrorWrite = `${colors.FgRed}Error while attempting to write file!${colors.Reset}`;
export const ErrorWriteBaseJson = `${colors.FgRed}Error while attempting to write Figma JSON!${colors.Reset}`;
export const ErrorWriteElements = `${colors.FgRed}Missing "elements" and/or "config" properties when calling writeElements()!${colors.Reset}`;
export const ErrorWriteFile = `${colors.FgRed}Missing required arguments to correctly run writeFile()!${colors.Reset}`;
export const ErrorWriteFileWrongType = `${colors.FgRed}Provided invalid file type to writeFile()!${colors.Reset}`;
export const ErrorWriteGraphics = `${colors.FgRed}Missing "fileList" and/or "config" argument when calling writeGraphics()!${colors.Reset}`;
export const ErrorWriteTokens = `${colors.FgRed}Less than one token provided to writeTokens()! Make sure you have a page called "Design Tokens" in your Figma document.${colors.Reset}`;
export const ErrorWriteTokensNoSettings = `${colors.FgRed}Missing "settings" argument/object when attempting to write tokens!${colors.Reset}`;
