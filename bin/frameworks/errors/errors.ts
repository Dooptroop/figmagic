import { colors } from '../system/colors';

export const ErrorAddDescriptionToElements: string = `${colors.FgRed}Missing elements and/or components in addDescriptionToElements()!`;
export const ErrorCamelize: string = `${colors.FgRed}No string provided to camelize()!`;
export const ErrorCleanArrays: string = `${colors.FgRed}Missing one or more of "classNames" and/or "classContent" when calling cleanArrays()!`;
export const ErrorConvertHexToRgba: string = `${colors.FgRed}Missing one or more of red, green, blue and alpha in convertHexToRgba()!`;
export const ErrorCreateConfiguration: string = `${colors.FgRed}No path provided to createConfiguration()!`;
export const ErrorCreateConfigurationNoDefault: string = `${colors.FgRed}No default configuration provided to createConfiguration()!`;
export const ErrorCreateCssString: string = `${colors.FgRed}Missing one or more of required arguments: "intersections", "uniqueValues"!`;
export const ErrorCreateEnumStringOutOfObject: string = `${colors.FgRed}No object provided to createEnumStringOutOfObject()!`;
export const ErrorCreateFolder: string = `${colors.FgRed}No directory specified for createFolder()!`;
export const ErrorCreateImportStringFromList: string = `${colors.FgRed}No "importArray" provided to createImportStringFromList()!`;
export const ErrorCreateImportStringFromListZeroLength: string = `${colors.FgRed}Provided "importArray" is zero-length when calling createImportStringFromList()!`;
export const ErrorCreatePage: string = `${colors.FgRed}No pages provided to createPage()!`;
export const ErrorDownloadFile: string = `${colors.FgRed}Missing one or more of "url", "folder", or "file" arguments in downloadFile()!`;
export const ErrorExtractDescription: string = `${colors.FgRed}Missing description in extractDescription()!`;
export const ErrorFindShortenedNameMatchOriginal: string = `${colors.FgRed}No "originalString" was provided to findShortenedNameMatch()!`;
export const ErrorFindShortenedNameMatchString: string = `${colors.FgRed}No "matchString" was provided to findShortenedNameMatch()!`;
export const ErrorFindShortenedNameMatchWrongType: string = `${colors.FgRed}Arguments are not of string type!`;
export const ErrorGetData: string = `${colors.FgRed}Could not retrieve any data. Are you missing a valid API key?`;
export const ErrorGetDescription: string = `${colors.FgRed}Missing element in getDescription()!`;
export const ErrorGetElementType: string = `${colors.FgRed}Missing element in getElementType()!`;
export const ErrorGetFileList: string = `${colors.FgRed}Missing one or more of required arguments: "imageResponse", "ids" and/or "outputFormatGraphics" when calling getFileList()!`;
export const ErrorGetFromApi: string = `${colors.FgRed}Missing one or more of required arguments: "figmaToken", "figmaUrl" when attempting to get data from Figma API!`;
export const ErrorGetIds: string = `${colors.FgRed}No (or zero-length) array passed to getIds()!`;
export const ErrorGetIdstring: string = `${colors.FgRed}Missing required argument "ids" when calling getIdString()!`;
export const ErrorGetIntersectingValues: string = `${colors.FgRed}Missing "arrays" argument when calling getIntersectingValues()!`;
export const ErrorGetTokenMatch: string = `${colors.FgRed}Missing one or more of required arguments: "tokens", "tokenFileName", "property", and/or "expectedValue"!`;
export const ErrorGetTokenMatchNoRemSize: string = `${colors.FgRed}Missing required "remSize" argument for getTokenMatch() when converting to rem/em!`;
export const ErrorGetUniqueValues: string = `${colors.FgRed}Missing one or more of required arguments: "arrays", and/or "intersections" when calling getUniqueValues()!`;
export const ErrorHandleNestedElements: string = `${colors.FgRed}Missing element in handleNestedElements()!`;
export const ErrorLoadFile = (path: string): string =>
  `${colors.FgRed}Could not find file: ${path}!`;
export const ErrorNormalizeUnits: string = `${colors.FgRed}Missing parameters for normalizeUnits()!`;
export const ErrorNormalizeUnitsNoRemSize: string = `${colors.FgRed}Missing required "remSize" argument for normalizeUnits() when converting to rem/em!`;
export const ErrorNormalizeUnitsUndefined: string = `${colors.FgRed}Parameters "rootSize" or "unitSize" are undefined!`;
export const ErrorParseCliArgs: string = `${colors.FgRed}No arguments array passed to parseCliArgs()!`;
export const ErrorParseCssFromDescription: string = `${colors.FgRed}Missing "tokens" when calling parseCssFromDescription()!`;
export const ErrorParseCssFromElement: string = `${colors.FgRed}Missing one or more of required arguments: "element", and/or "remSize" when calling parseCssFromElement()!`;
export const ErrorParseElement: string = `${colors.FgRed}Missing one or more of required arguments: "element", and/or "remSize" when calling parseElement()!`;
export const ErrorParseTypographyStylingFromElement: string = `${colors.FgRed}Missing one or more of required arguments: "element", or "remSize" when calling parseTypographyStylingFromElement()!`;
export const ErrorPrepareWrite: string = `${colors.FgRed}No templates provided to prepareWrite()! Seems like fallback template path also failed...`;
export const ErrorProcessElements: string = `${colors.FgRed}Missing one or more of required arguments: "elementsPage", "config", and/or "components"! Make sure you have a page called "Elements" in your Figma document.`;
export const ErrorProcessElementsNoMainElement: string = `${colors.FgRed}No MAIN_ELEMENT in processElements()!`;
export const ErrorProcessElementsWrongElementCount: string = `${colors.FgRed}Did not find exactly 1 (one) match for element`;
export const ErrorProcessElementsWrongTextElementCount: string = `${colors.FgRed}Found more than one match for "Text" node. Required: 0 or 1 text nodes as child of element`;
export const ErrorProcessGraphics: string = `${colors.FgRed}Graphics page is undefined or empty! Make sure you have a page called "Graphics" in your Figma document.`;
export const ErrorProcessGraphicsImageError: string = `${colors.FgRed}Error when fetching graphics from Figma API!`;
export const ErrorProcessGraphicsNoImages: string = `${colors.FgRed}No images received from Figma API!`;
export const ErrorProcessNestedCss: string = `${colors.FgRed}No 'css' string provided to processNestedCss()!`;
export const ErrorProcessTokens: string = `${colors.FgRed}No sheet or name for processTokens()!`;
export const ErrorProcessTokensNoConfig: string = `${colors.FgRed}No config provided to processTokens()!`;
export const ErrorReplaceMediaQuery: string = `Missing one or more of required arguments: "str", and/or "match" when calling replaceMediaQuery()!`;
export const ErrorRoundColor: string = `${colors.FgRed}Error while rounding color value: Required argument "quantity" was not passed in!`;
export const ErrorRoundColorValue: string = `${colors.FgRed}Error while rounding color value: Scale value must be equal to or less than 255!`;
export const ErrorSetupBorderWidthTokensMissingProps: string = `${colors.FgRed}Missing "name" or "strokeWeight" properties in border width frame!`;
export const ErrorSetupBorderWidthTokensNoChildren: string = `${colors.FgRed}Border Width has no children!`;
export const ErrorSetupBorderWidthTokensNoFrame: string = `${colors.FgRed}No frame for setupBorderWidthTokens()!`;
export const ErrorSetupColorTokensNoChildren: string = `${colors.FgRed}Color tokens frame has no children!`;
export const ErrorSetupColorTokensNoFills: string = `${colors.FgRed}Color has no "fills" property!`;
export const ErrorSetupColorTokensNoFrame: string = `${colors.FgRed}No frame for setupColorTokens()!`;
export const ErrorSetupDelayTokensMissingProps: string = `${colors.FgRed}Missing "name" or "characters" properties in Delay frame!`;
export const ErrorSetupDelayTokensNoChildren: string = `${colors.FgRed}Delay frame has no children!`;
export const ErrorSetupDelayTokensNoFrame: string = `${colors.FgRed}No frame for setupDelayTokens()!`;
export const ErrorSetupDurationTokensMissingProps: string = `${colors.FgRed}Missing "name" or "characters" properties in Duration frame!`;
export const ErrorSetupDurationTokensNoChildren: string = `${colors.FgRed}Duration frame has no children!`;
export const ErrorSetupDurationTokensNoFrame: string = `${colors.FgRed}No frame for setupDurationTokens()!`;
export const ErrorSetupEasingTokensMissingProps: string = `${colors.FgRed}Missing "name" or "characters" properties in Easing frame!`;
export const ErrorSetupEasingTokensNoChildren: string = `${colors.FgRed}Easing frame has no children!`;
export const ErrorSetupEasingTokensNoFrame: string = `${colors.FgRed}No frame for setupEasingTokens()!`;
export const ErrorSetupFontSizeTokensMissingProps: string = `${colors.FgRed}Missing "name" or "style" properties in font sizes frame!`;
export const ErrorSetupFontSizeTokensMissingSize: string = `${colors.FgRed}Missing required "style.fontSize" property!`;
export const ErrorSetupFontSizeTokensNoChildren: string = `${colors.FgRed}Font size frame is missing "children" array!`;
export const ErrorSetupFontSizeTokensNoFrame: string = `${colors.FgRed}No frame for setupFontSizeTokens()!`;
export const ErrorSetupFontSizeTokensNoSizing: string = `${colors.FgRed}Missing "fontUnit" or "remSize" properties when calling setupFontSizeTokens()!`;
export const ErrorSetupFontTokensMissingProps: string = `${colors.FgRed}Missing "name" or "style" properties in font tokens frame!`;
export const ErrorSetupFontTokensNoChildren: string = `${colors.FgRed}Font tokens frame is missing "children" array!`;
export const ErrorSetupFontTokensNoFrame: string = `${colors.FgRed}No frame for setupFontTokens()!`;
export const ErrorSetupFontWeightTokensMissingProps: string = `${colors.FgRed}Missing "name" or "style" properties in font weights frame!`;
export const ErrorSetupFontWeightTokensMissingWeight: string = `${colors.FgRed}Missing required "style.fontWeight" property!`;
export const ErrorSetupFontWeightTokensNoChildren: string = `${colors.FgRed}Font weights frame is missing "children" array!`;
export const ErrorSetupFontWeightTokensNoFrame: string = `${colors.FgRed}No frame for setupFontWeightTokens()!`;
export const ErrorSetupLetterSpacingTokensMissingProps: string = `${colors.FgRed}Missing "name" or "style" properties in letter spacing frame!`;
export const ErrorSetupLetterSpacingTokensNoChildren: string = `${colors.FgRed}Letter Spacing frame has no children!`;
export const ErrorSetupLetterSpacingTokensNoFrame: string = `${colors.FgRed}No frame for setupLetterSpacingTokens()!`;
export const ErrorSetupLineHeightTokensMissingPercent: string = `${colors.FgRed}Missing "style.lineHeightPercentFontSize" property in line heights frame!`;
export const ErrorSetupLineHeightTokensMissingProps: string = `${colors.FgRed}Missing "name" or "style" properties in line heights frame!`;
export const ErrorSetupLineHeightTokensNoChildren: string = `${colors.FgRed}Line heights frame has no children!`;
export const ErrorSetupLineHeightTokensNoFrame: string = `${colors.FgRed}No frame for setupLineHeightTokens()!`;
export const ErrorSetupMediaQueryTokensMissingProps: string = `${colors.FgRed}Missing "absoluteBoundingBox" property in media query frame!`;
export const ErrorSetupMediaQueryTokensNoChildren: string = `${colors.FgRed}Media Query frame has no children!`;
export const ErrorSetupMediaQueryTokensNoFrame: string = `${colors.FgRed}No frame for setupMediaQueryTokens()!`;
export const ErrorSetupOpacityTokensMissingProps: string = `${colors.FgRed}Missing "name" or "characters" properties in opacities frame!`;
export const ErrorSetupOpacityTokensNoChildren: string = `${colors.FgRed}Opacities frame has no children!`;
export const ErrorSetupOpacityTokensNoFrame: string = `${colors.FgRed}No frame for setupOpacityTokens()!`;
export const ErrorSetupRadiusTokensMissingProps: string = `${colors.FgRed}Missing "name"  property in radius frame!`;
export const ErrorSetupRadiusTokensNoChildren: string = `${colors.FgRed}Radius frame has no children!`;
export const ErrorSetupRadiusTokensNoFrame: string = `${colors.FgRed}No frame for setupRadiusTokens()!`;
export const ErrorSetupShadowTokensMissingProps: string = `${colors.FgRed}Missing "effects" property in shadow frame!`;
export const ErrorSetupShadowTokensNoChildren: string = `${colors.FgRed}Shadow frame has no children!`;
export const ErrorSetupShadowTokensNoFrame: string = `${colors.FgRed}No frame for setupShadowTokens()!`;
export const ErrorSetupSpacingTokensMissingProps: string = `${colors.FgRed}Missing "name" or "absoluteBoundingBox" properties in spacing frame!`;
export const ErrorSetupSpacingTokensNoChildren: string = `${colors.FgRed}Spacing frame has no children!`;
export const ErrorSetupSpacingTokensNoFrame: string = `${colors.FgRed}No frame for setupSpacingTokens()!`;
export const ErrorSetupSpacingTokensNoUnits: string = `${colors.FgRed}Missing "spacingUnit" or "remSize" properties when calling setupSpacingTokens()!`;
export const ErrorSetupZindexTokensMissingProps: string = `${colors.FgRed}Missing "name" or "characters" properties in Z index frame!`;
export const ErrorSetupZindexTokensNoChildren: string = `${colors.FgRed}Z Index frame has no children!`;
export const ErrorSetupZindexTokensNoFrame: string = `${colors.FgRed}No frame for setupZindexTokens()!`;
export const ErrorToPascalCase: string = `${colors.FgRed}Missing "str" argument when calling toPascalCase()!`;
export const ErrorWrite: string = `${colors.FgRed}Error while attempting to write file!`;
export const ErrorWriteElements: string = `${colors.FgRed}Missing "elements" and/or "config" properties when calling writeElements()!`;
export const ErrorWriteFile: string = `${colors.FgRed}Missing required parameters to correctly run writeFile()!`;
export const ErrorWriteFileWrongType: string = `${colors.FgRed}Provided invalid file type to writeFile()!`;
export const ErrorWriteGraphics: string = `${colors.FgRed}Missing "fileList" and/or "config" argument when calling writeGraphics()!`;
export const ErrorWriteTokens: string = `${colors.FgRed}Less than one token provided to writeTokens()! Make sure you have a page called "Design Tokens" in your Figma document.`;
export const ErrorWriteTokensNoSettings: string = `${colors.FgRed}Missing "settings" argument/object when attempting to write tokens!`;
